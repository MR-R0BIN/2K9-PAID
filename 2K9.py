#Encrypt by MAHAMUD R0B1N
#Github : https://github.com/MR-R0BIN
#MY LEDER MAHADI HASAN AFRIDI V‚ù§üíã
import base64
exec(base64.b64decode(''))
